/* Generated By:JavaCC: Do not edit this line. TikiDBParser.java */
package de.tud.dvs.parser.javacc;

import java.util.Vector;
import de.tud.dvs.parser.Tools;
import de.tud.dvs.parser.operations.*;
import de.tud.dvs.parser.operations.scopes.JScopeBinaryLogicalExpression;
import de.tud.dvs.parser.operations.scopes.JScopeComparison;
import de.tud.dvs.parser.operations.scopes.JScopeConstant;
import de.tud.dvs.parser.operations.scopes.JScopeCreateMsg;
import de.tud.dvs.parser.operations.scopes.JScopeDataMsg;
import de.tud.dvs.parser.operations.scopes.JScopeExistsSensor;
import de.tud.dvs.parser.operations.scopes.JScopeExpression;
import de.tud.dvs.parser.operations.scopes.JScopeGeometricOperation;
import de.tud.dvs.parser.operations.scopes.JScopeLogicalExpression;
import de.tud.dvs.parser.operations.scopes.JScopeMsg;
import de.tud.dvs.parser.operations.scopes.JScopeNodeId;
import de.tud.dvs.parser.operations.scopes.JScopeNodePosition;
import de.tud.dvs.parser.operations.scopes.JScopeOperand;
import de.tud.dvs.parser.operations.scopes.JScopePoint;
import de.tud.dvs.parser.operations.scopes.JScopePolygon;
import de.tud.dvs.parser.operations.scopes.JScopeRemoveMsg;
import de.tud.dvs.parser.operations.scopes.JScopeRepositoryKey;
import de.tud.dvs.parser.operations.scopes.JScopeSphere;
import de.tud.dvs.parser.operations.scopes.JScopeTerm;
import de.tud.dvs.parser.operations.scopes.JScopeUnaryLogicalExpression;

public class TikiDBParser implements TikiDBParserConstants {

  private static boolean debug = true;

  private static TikiDBParser instance = null;

  public static TikiDBParser getInstance() {
    if (instance == null)
      instance = new TikiDBParser(System.in);
    return instance;
  }

  private TikiDBParser() {
  }

// ----------------------
  final public JScopeMsg parseScopeOperation() throws ParseException {
  JScopeMsg msg;
    if (jj_2_1(2)) {
      msg = scopeCreation();
    } else if (jj_2_2(2)) {
      msg = scopeData();
    } else if (jj_2_3(2)) {
      msg = scopeRemoval();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return msg;}
    throw new Error("Missing return statement in function");
  }

// ----------------------
  final public JScopeCreateMsg scopeCreation() throws ParseException {
  JScopeExpression exp;
  JScopeCreateMsg message;
  String scopeIdentifierStr;
  String superScopeIdentifierStr;
  int scopeId = 0;
  int superScopeId = 0;
        if (Tools.debugLevel()>4)
          System.out.println("[TikiDBParser::scopeCreation()] CREATE SCOPE (begin)");
    jj_consume_token(CREATE);
    jj_consume_token(SCOPE);
    jj_consume_token(SCOPE_IDENTIFIER);
    scopeIdentifierStr =  token.image.trim();
    jj_consume_token(AS);
    exp = scopeExpressionL1();
        if (Tools.debugLevel()>4)
          System.out.println("[TikiDBParser::scopeCreation()] CREATE SCOPE (end)");

        message = new JScopeCreateMsg();

        scopeId = Tools.hashName(scopeIdentifierStr);

        if (Tools.debugLevel()>3) {
          System.out.println("[TikiDBParser::scopeCreation()] Scope Name: " + scopeIdentifierStr);
          System.out.println("[TikiDBParser::scopeCreation()] Chosen scopeId: " + scopeId);
        }

        message.setScopeId(scopeId);

        message.setJScopeExpression(exp);
    if (jj_2_4(2)) {
      jj_consume_token(SUBSCOPE);
      jj_consume_token(OF);
      jj_consume_token(SCOPE_IDENTIFIER);
    superScopeIdentifierStr =  token.image.trim();

        superScopeId = Tools.hashName(superScopeIdentifierStr);

        if (Tools.debugLevel()>3) {
          System.out.println("[TikiDBParser::scopeCreation()] SuperScope Name: " + superScopeIdentifierStr);
          System.out.println("[TikiDBParser::scopeCreation()] Chosen superScopeId: " + superScopeId);
        }
    } else {
      ;
    }
        message.setSuperScopeId(superScopeId);

        {if (true) return message;}
    throw new Error("Missing return statement in function");
  }

// ----------------------
  final public JScopeDataMsg scopeData() throws ParseException {
  JScopeDataMsg message;
  String scopeIdentifierStr, hexDataStr;
  int scopeId = 0;
  int value = 0;
        if (Tools.debugLevel()>4)
          System.out.println("[TikiDBParser::scopeData()] SEND DATA SCOPE (begin)");
    jj_consume_token(SEND);
    jj_consume_token(DATA);
    jj_consume_token(SCOPE);
    jj_consume_token(SCOPE_IDENTIFIER);
    scopeIdentifierStr = token.image.trim();
    if (Tools.debugLevel()>4)
      System.out.println("[TikiDBParser::scopeData()] SEND DATA SCOPE (end)");

    message = new JScopeDataMsg();

        scopeId = Tools.hashName(scopeIdentifierStr);

    if (Tools.debugLevel()>3) {
          System.out.println("[TikiDBParser::scopeData()] Scope Name: " + scopeIdentifierStr);
      System.out.println("[TikiDBParser::scopeData()] Chosen scopeId: " + scopeId);
    }

    message.setScopeId(scopeId);
    jj_consume_token(DEST_MODULE);
    jj_consume_token(NUM);
    try
    {
      value = Integer.valueOf( token.image.trim() ).intValue();
    }
    catch (NumberFormatException ee)
    {
          value = new Integer(Integer.MAX_VALUE).intValue();
    }

    message.setDestinationModuleId(value);
    jj_consume_token(SOURCE_MODULE);
    jj_consume_token(NUM);
    try
    {
      value = Integer.valueOf( token.image.trim() ).intValue();
    }
    catch (NumberFormatException ee)
    {
          value = new Integer(Integer.MAX_VALUE).intValue();
    }

    message.setSourceModuleId(value);
    jj_consume_token(TYPE);
    jj_consume_token(NUM);
    try
    {
      value = Integer.valueOf( token.image.trim() ).intValue();
    }
    catch (NumberFormatException ee)
    {
          value = new Integer(Integer.MAX_VALUE).intValue();
    }

    message.setMessageType(value);
    jj_consume_token(PAYLOAD);
    label_1:
    while (true) {
      jj_consume_token(HEX_DATA);
      hexDataStr = token.image.trim();
      try {
        hexDataStr = hexDataStr.substring(2);
        message.addPayloadInteger(Integer.parseInt(hexDataStr, 16));
      } catch (NumberFormatException ex) {
        {if (true) throw new ParseException("A hexadecimal character is somewhat wrong!");}
      }
      if (jj_2_5(2)) {
        ;
      } else {
        break label_1;
      }
    }
        {if (true) return message;}
    throw new Error("Missing return statement in function");
  }

// ----------------------
  final public JScopeRemoveMsg scopeRemoval() throws ParseException {
  JScopeRemoveMsg message;
  String scopeIdentifierStr;
  int scopeId;
        if (Tools.debugLevel()>3)
          System.out.println("[TikiDBParser::scopeRemoval()] REMOVE SCOPE (begin)");
    jj_consume_token(REMOVE);
    jj_consume_token(SCOPE);
    jj_consume_token(SCOPE_IDENTIFIER);
        scopeIdentifierStr = token.image.trim();

        message = new JScopeRemoveMsg();

        scopeId = Tools.hashName(scopeIdentifierStr);

        if (Tools.debugLevel()>4) {
          System.out.println("[TikiDBParser::scopeRemoval()] Scope Name: " + scopeIdentifierStr);
          System.out.println("[TikiDBParser::scopeRemoval()] Chosen scopeId: " + scopeId);
        }

        message.setScopeId(scopeId);

        {if (true) return message;}
    throw new Error("Missing return statement in function");
  }

// ----------------------
  final public JScopeExpression scopeExpressionL1() throws ParseException {
  JScopeExpression exp1 = null, exp2 = null;
  JScopeBinaryLogicalExpression result = null;
        if (Tools.debugLevel()>4)
          System.out.println("[TikiDBParser::scopeExpressionL1()] OR scopeExpressionL1() - - (begin)");
    exp1 = scopeExpressionL2();
        if (Tools.debugLevel()>4)
          System.out.println("[TikiDBParser::scopeExpressionL1()] OR scopeExpressionL1() - - (middle0)");
    label_2:
    while (true) {
      if (jj_2_6(2)) {
        ;
      } else {
        break label_2;
      }
      if (Tools.debugLevel()>4)
            System.out.println("[TikiDBParser::scopeExpressionL1()] OR scopeExpressionL1() - - (middle1)");
      jj_consume_token(OR);
      exp2 = scopeExpressionL2();
      if (Tools.debugLevel()>4)
            System.out.println("[TikiDBParser::scopeExpressionL1()] OR scopeExpressionL1() - - (middle2)");

      if (result != null)
        exp1 = result;

      result = new JScopeBinaryLogicalExpression();

      result.setOperator(JScopeLogicalExpression.OR);
      result.setOperand1(exp1);
      result.setOperand2(exp2);
    }
        if (Tools.debugLevel()>4)
          System.out.println("[TikiDBParser::scopeExpressionL1()] OR scopeExpressionL1() - - (end)");

        if (result == null)
          {if (true) return exp1;}
        {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

// ----------------------
  final public JScopeExpression scopeExpressionL2() throws ParseException {
  JScopeExpression exp1 = null, exp2 = null;
  JScopeBinaryLogicalExpression result = null;
        if (Tools.debugLevel()>4)
          System.out.println("[TikiDBParser::scopeExpressionL2()] AND scopeExpressionL2() - - (begin)");
    exp1 = scopeExpressionL3();
        if (Tools.debugLevel()>4)
          System.out.println("[TikiDBParser::scopeExpressionL2()] AND scopeExpressionL2() - - (middle0)");
    label_3:
    while (true) {
      if (jj_2_7(2)) {
        ;
      } else {
        break label_3;
      }
      if (Tools.debugLevel()>4)
            System.out.println("[TikiDBParser::scopeExpressionL2()] AND scopeExpressionL2() - - (middle1)");
      jj_consume_token(AND);
      exp2 = scopeExpressionL3();
      if (Tools.debugLevel()>4)
            System.out.println("[TikiDBParser::scopeExpressionL2()] AND scopeExpressionL2() - - (middle2)");

      if (result != null)
        exp1 = result;

      result = new JScopeBinaryLogicalExpression();

      result.setOperator(JScopeLogicalExpression.AND);
      result.setOperand1(exp1);
      result.setOperand2(exp2);
    }
        if (Tools.debugLevel()>4)
          System.out.println("[TikiDBParser::scopeExpressionL2()] AND  - - (end)");

        if (result == null)
          {if (true) return exp1;}
        {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

// ----------------------
  final public JScopeExpression scopeExpressionL3() throws ParseException {
  JScopeExpression exp;
    if (jj_2_8(2)) {
        if (Tools.debugLevel()>4)
          System.out.println("[TikiDBParser::scopeExpressionL3()] NOT -with not- (begin)");
      jj_consume_token(NOT);
      exp = scopeExpressionL4();
        if (Tools.debugLevel()>4)
          System.out.println("[TikiDBParser::scopeExpressionL3()] NOT -with not- end)");

    JScopeUnaryLogicalExpression result = new JScopeUnaryLogicalExpression();

    result.setOperand(exp);
    result.setOperator(JScopeLogicalExpression.NOT);

    {if (true) return result;}
    } else if (jj_2_9(2)) {
        if (Tools.debugLevel()>4)
          System.out.println("[TikiDBParser::scopeExpressionL3()] NOT -without not- (begin)");
      exp = scopeExpressionL4();
        if (Tools.debugLevel()>4)
          System.out.println("[TikiDBParser::scopeExpressionL3()] NOT -without not- (end)");

        {if (true) return exp;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// ----------------------
  final public JScopeExpression scopeExpressionL4() throws ParseException {
  JScopeExpression exp;
    if (jj_2_10(2)) {
        if (Tools.debugLevel()>4)
          System.out.println("[TikiDBParser::scopeExpressionL4()] -term- (begin)");
      exp = scopeTerm();
        if (Tools.debugLevel()>4)
          System.out.println("[TikiDBParser::scopeExpressionL4()] -term- (end)");

        {if (true) return exp;}
    } else if (jj_2_11(2)) {
        if (Tools.debugLevel()>4)
          System.out.println("[TikiDBParser::scopeExpressionL4()] -parenthesis- (begin)");
      jj_consume_token(54);
      exp = scopeExpressionL1();
      jj_consume_token(55);
        if (Tools.debugLevel()>4)
          System.out.println("[TikiDBParser::scopeExpressionL4()] -parenthesis- (end)");

        {if (true) return exp;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// ----------------------
  final public JScopeExpression scopeTerm() throws ParseException {
  JScopeTerm result;
    if (jj_2_12(2)) {
      result = scopeExistsSensorTerm();
    } else if (jj_2_13(2)) {
      result = scopeComparisonTerm();
    } else if (jj_2_14(2)) {
      result = scopeGeometricalTerm();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

// ----------------------
  final public JScopeTerm scopeExistsSensorTerm() throws ParseException {
    jj_consume_token(EXISTS);
    jj_consume_token(SENSOR);
    jj_consume_token(SENSOR_TYPE);
    JScopeExistsSensor ex = new JScopeExistsSensor();

    String sensor = token.image.trim();

    if (sensor.equalsIgnoreCase("LIGHT_AMBIENT"))
      ex.setSensor(JScopeExistsSensor.SENSOR_LIGHT_AMBIENT);
    else if (sensor.equalsIgnoreCase("LIGHT_PAR"))
      ex.setSensor(JScopeExistsSensor.SENSOR_LIGHT_PAR);
    else if (sensor.equalsIgnoreCase("HUMIDITY"))
      ex.setSensor(JScopeExistsSensor.SENSOR_HUMIDITY);
    else if (sensor.equalsIgnoreCase("TEMPERATURE"))
      ex.setSensor(JScopeExistsSensor.SENSOR_TEMPERATURE);
    else if (sensor.equalsIgnoreCase("INTERNAL_TEMPERATURE"))
      ex.setSensor(JScopeExistsSensor.SENSOR_INTERNAL_TEMPERATURE);
    else if (sensor.equalsIgnoreCase("ACCEL_X"))
      ex.setSensor(JScopeExistsSensor.SENSOR_ACCEL_X);
    else if (sensor.equalsIgnoreCase("ACCEL_Y"))
      ex.setSensor(JScopeExistsSensor.SENSOR_ACCEL_Y);
    else if (sensor.equalsIgnoreCase("INTERNAL_VOLTAGE"))
      ex.setSensor(JScopeExistsSensor.SENSOR_INTERNAL_VOLTAGE);
    else
      {if (true) throw new ParseException("The specified sensor is somewhat wrong!");}

    {if (true) return ex;}
    throw new Error("Missing return statement in function");
  }

// ----------------------
  final public JScopeTerm scopeComparisonTerm() throws ParseException {
  JScopeOperand op1, op2;
  int cOp;
    JScopeComparison comp = new JScopeComparison();
    op1 = scopeComparisonOperand();
    cOp = scopeComparisonOperator();
    op2 = scopeComparisonOperand();
    comp.setComparisonOperator(cOp);
    comp.setOperand1(op1);
    comp.setOperand2(op2);

    {if (true) return comp;}
    throw new Error("Missing return statement in function");
  }

// ----------------------
  final public JScopeOperand scopeComparisonOperand() throws ParseException {
    if (jj_2_15(2)) {
      jj_consume_token(SENSOR_TYPE);
    JScopeRepositoryKey k = new JScopeRepositoryKey();

    String sensor = token.image.trim();

    if (sensor.equalsIgnoreCase("LIGHT_AMBIENT"))
      k.setRepositoryKey(JScopeExistsSensor.SENSOR_LIGHT_AMBIENT);
    else if (sensor.equalsIgnoreCase("LIGHT_PAR"))
      k.setRepositoryKey(JScopeExistsSensor.SENSOR_LIGHT_PAR);
    else if (sensor.equalsIgnoreCase("HUMIDITY"))
      k.setRepositoryKey(JScopeExistsSensor.SENSOR_HUMIDITY);
    else if (sensor.equalsIgnoreCase("TEMPERATURE"))
      k.setRepositoryKey(JScopeExistsSensor.SENSOR_TEMPERATURE);
    else if (sensor.equalsIgnoreCase("INTERNAL_TEMPERATURE"))
      k.setRepositoryKey(JScopeExistsSensor.SENSOR_INTERNAL_TEMPERATURE);
    else if (sensor.equalsIgnoreCase("ACCEL_X"))
      k.setRepositoryKey(JScopeExistsSensor.SENSOR_ACCEL_X);
    else if (sensor.equalsIgnoreCase("ACCEL_Y"))
      k.setRepositoryKey(JScopeExistsSensor.SENSOR_ACCEL_Y);
    else if (sensor.equalsIgnoreCase("INTERNAL_VOLTAGE"))
      k.setRepositoryKey(JScopeExistsSensor.SENSOR_INTERNAL_VOLTAGE);
    else k.setRepositoryKey(0);

    {if (true) return k;}
    } else if (jj_2_16(2)) {
      jj_consume_token(REPOSITORY_KEY);
      jj_consume_token(NUM);
    int value = 0;
    try
    {
      value = Integer.valueOf( token.image.trim() ).intValue();
    }
    catch (NumberFormatException ee)
    {
          value = new Integer(Integer.MAX_VALUE).intValue();
    }

    JScopeRepositoryKey k = new JScopeRepositoryKey();
    k.setRepositoryKey(value);
    {if (true) return k;}
    } else if (jj_2_17(2)) {
      jj_consume_token(NODE_ID);
    {if (true) return new JScopeNodeId();}
    } else if (jj_2_18(2)) {
      jj_consume_token(NUM);
    int value = 0;
    try
    {
      value = Integer.valueOf( token.image.trim() ).intValue();
    }
    catch (NumberFormatException ee)
    {
          value = new Integer(Integer.MAX_VALUE).intValue();
    }

    JScopeConstant c = new JScopeConstant();
    c.setNumericValue(value);
    {if (true) return c;}
    } else if (jj_2_19(2)) {
      jj_consume_token(BOOLEAN);
    boolean value = false;
    try
    {
      value = Boolean.valueOf( token.image.trim() ).booleanValue();
    }
    catch (NumberFormatException ee)
    {
          value = false;
    }

    JScopeConstant c = new JScopeConstant();
    c.setBooleanValue(value);
    {if (true) return c;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// ----------------------
  final public int scopeComparisonOperator() throws ParseException {
  Token t;
    if (jj_2_20(2)) {
      t = jj_consume_token(EQUAL);
    } else if (jj_2_21(2)) {
      t = jj_consume_token(DISTINCT);
    } else if (jj_2_22(2)) {
      t = jj_consume_token(GREATERTHAN);
    } else if (jj_2_23(2)) {
      t = jj_consume_token(LESSTHAN);
    } else if (jj_2_24(2)) {
      t = jj_consume_token(GREATEROREQUAL);
    } else if (jj_2_25(2)) {
      t = jj_consume_token(LESSOREQUAL);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
        switch (t.kind) {
          case EQUAL:           {if (true) return JScopeComparison.EQUAL;}
      case DISTINCT:        {if (true) return JScopeComparison.DISTINCT;}
          case GREATERTHAN:     {if (true) return JScopeComparison.GREATERTHAN;}
      case LESSTHAN:        {if (true) return JScopeComparison.LESSTHAN;}
          case GREATEROREQUAL:  {if (true) return JScopeComparison.GREATERTHANOREQUAL;}
      case LESSOREQUAL:     {if (true) return JScopeComparison.LESSTHANOREQUAL;}
    }
    throw new Error("Missing return statement in function");
  }

// ----------------------
  final public JScopeTerm scopeGeometricalTerm() throws ParseException {
    if (jj_2_32(2)) {
      jj_consume_token(IN);
      jj_consume_token(POLYGON);
    JScopePolygon poly;
    JScopePoint point;
    JScopeNodePosition pos;
    JScopeGeometricOperation op = new JScopeGeometricOperation();
    op.setGeometricOperator(JScopeGeometricOperation.IN_POLYGON);
      jj_consume_token(54);
      poly = scopePolygon();
      op.addGeometricElement(poly);
      jj_consume_token(56);
      if (jj_2_28(2)) {
        if (jj_2_26(2)) {
          point = scopePoint();
      op.addGeometricElement(point);
        } else if (jj_2_27(2)) {
          pos = scopeNodePosition();
      op.addGeometricElement(pos);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else {
        ;
      }
      jj_consume_token(55);
    {if (true) return op;}
    } else if (jj_2_33(2)) {
      jj_consume_token(IN);
      jj_consume_token(SPHERE);
    JScopeSphere sphere;
    JScopePoint point;
    JScopeNodePosition pos;
    JScopeGeometricOperation op = new JScopeGeometricOperation();
    op.setGeometricOperator(JScopeGeometricOperation.IN_SPHERE);
      jj_consume_token(54);
      sphere = scopeSphere();
      op.addGeometricElement(sphere);
      jj_consume_token(56);
      if (jj_2_31(2)) {
        if (jj_2_29(2)) {
          point = scopePoint();
      op.addGeometricElement(point);
        } else if (jj_2_30(2)) {
          pos = scopeNodePosition();
      op.addGeometricElement(pos);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else {
        ;
      }
      jj_consume_token(55);
    {if (true) return op;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// ----------------------
  final public JScopePolygon scopePolygon() throws ParseException {
  Vector<JScopePoint> points = new Vector<JScopePoint>();
  JScopePoint point;
    jj_consume_token(POLYGON);
    jj_consume_token(54);
    point = scopePoint();
        points.add(point);
    label_4:
    while (true) {
      if (jj_2_34(2)) {
        ;
      } else {
        break label_4;
      }
      jj_consume_token(56);
      point = scopePoint();
          points.add(point);
    }
    jj_consume_token(55);
     JScopePolygon poly = new JScopePolygon();
     poly.setPoints(points);

     {if (true) return poly;}
    throw new Error("Missing return statement in function");
  }

// ----------------------
  final public JScopeSphere scopeSphere() throws ParseException {
  JScopePoint sphereCenter;
  int radius;
    jj_consume_token(SPHERE);
    jj_consume_token(54);
    sphereCenter = scopePoint();
    jj_consume_token(56);
    jj_consume_token(NUM);
       try {
         radius = Integer.valueOf( token.image.trim() ).intValue();
       } catch (NumberFormatException ee) {
         radius = -1;
       }
    jj_consume_token(55);
    JScopeSphere sphere = new JScopeSphere();
    sphere.setCenter(sphereCenter);
    sphere.setRadius(radius);

    {if (true) return sphere;}
    throw new Error("Missing return statement in function");
  }

// ----------------------
  final public JScopePoint scopePoint() throws ParseException {
  int x, y, z;
    jj_consume_token(57);
    jj_consume_token(NUM);
    try
    {
      x = Integer.valueOf( token.image.trim() ).intValue();
    }
    catch (NumberFormatException ee)
    {
          x = 65535;
    }
    jj_consume_token(56);
    jj_consume_token(NUM);
    try
    {
      y = Integer.valueOf( token.image.trim() ).intValue();
    }
    catch (NumberFormatException ee)
    {
          y = 65535;
    }
    jj_consume_token(56);
    jj_consume_token(NUM);
    try
    {
      z = Integer.valueOf( token.image.trim() ).intValue();
    }
    catch (NumberFormatException ee)
    {
          z = 65535;
    }
    jj_consume_token(58);
    JScopePoint pos = new JScopePoint();
    pos.setx(x);
    pos.sety(y);
    pos.setz(z);
    {if (true) return pos;}
    throw new Error("Missing return statement in function");
  }

// ----------------------
  final public JScopeNodePosition scopeNodePosition() throws ParseException {
    jj_consume_token(NODE_POSITION);
    {if (true) return new JScopeNodePosition();}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_3_23() {
    if (jj_scan_token(LESSTHAN)) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(HEX_DATA)) return true;
    return false;
  }

  private boolean jj_3_22() {
    if (jj_scan_token(GREATERTHAN)) return true;
    return false;
  }

  private boolean jj_3_21() {
    if (jj_scan_token(DISTINCT)) return true;
    return false;
  }

  private boolean jj_3_20() {
    if (jj_scan_token(EQUAL)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_7()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(SUBSCOPE)) return true;
    if (jj_scan_token(OF)) return true;
    return false;
  }

  private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3_22()) {
    jj_scanpos = xsp;
    if (jj_3_23()) {
    jj_scanpos = xsp;
    if (jj_3_24()) {
    jj_scanpos = xsp;
    if (jj_3_25()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) return true;
    }
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3R_14() {
    if (jj_3R_18()) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3_30() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3_29() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3_31() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_29()) {
    jj_scanpos = xsp;
    if (jj_3_30()) return true;
    }
    return false;
  }

  private boolean jj_3_19() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3R_5() {
    if (jj_scan_token(CREATE)) return true;
    if (jj_scan_token(SCOPE)) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_scan_token(57)) return true;
    if (jj_scan_token(NUM)) return true;
    return false;
  }

  private boolean jj_3_33() {
    if (jj_scan_token(IN)) return true;
    if (jj_scan_token(SPHERE)) return true;
    return false;
  }

  private boolean jj_3R_12() {
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3R_9() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) return true;
    }
    return false;
  }

  private boolean jj_3_8() {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_scan_token(NUM)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_5()) return true;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_scan_token(NODE_ID)) return true;
    return false;
  }

  private boolean jj_3_27() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_scan_token(EXISTS)) return true;
    if (jj_scan_token(SENSOR)) return true;
    return false;
  }

  private boolean jj_3_26() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_26()) {
    jj_scanpos = xsp;
    if (jj_3_27()) return true;
    }
    return false;
  }

  private boolean jj_3_12() {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_scan_token(REPOSITORY_KEY)) return true;
    if (jj_scan_token(NUM)) return true;
    return false;
  }

  private boolean jj_3R_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3_14()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_6() {
    if (jj_scan_token(SEND)) return true;
    if (jj_scan_token(DATA)) return true;
    return false;
  }

  private boolean jj_3R_7() {
    if (jj_scan_token(REMOVE)) return true;
    if (jj_scan_token(SCOPE)) return true;
    return false;
  }

  private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_32()) {
    jj_scanpos = xsp;
    if (jj_3_33()) return true;
    }
    return false;
  }

  private boolean jj_3_32() {
    if (jj_scan_token(IN)) return true;
    if (jj_scan_token(POLYGON)) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_scan_token(NODE_POSITION)) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_scan_token(54)) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3_34() {
    if (jj_scan_token(56)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_8() {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3_19()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_15() {
    if (jj_scan_token(SENSOR_TYPE)) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3_25() {
    if (jj_scan_token(LESSOREQUAL)) return true;
    return false;
  }

  private boolean jj_3_24() {
    if (jj_scan_token(GREATEROREQUAL)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public TikiDBParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[34];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public TikiDBParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public TikiDBParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new TikiDBParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public TikiDBParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new TikiDBParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public TikiDBParser(TikiDBParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(TikiDBParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[59];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 59; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 34; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
